{"name":"Functional Programming","tagline":"Functional Programming","body":"## What is Functional Programming?\r\n\r\nFunctional Programming is when functions, not objects or procedures, are used as the fundamental building blocks of a program. Functions in this sense, not to be confused with C language functions which are just procedures, are analogous to mathematical equations: they declare a relationship between two or more entities.\r\nFunctional Programming, however, is not about mathematics but about abstraction and reducing complexity: as such, it provides a powerful paradigm in which to tackle complex, real-world programming tasks.\r\n\r\nFunctional Programming Languages, which support this style of programming, provide at least some of the following features:\r\n* FirstClass functions\r\n* HigherOrderFunctions\r\n* LexicalClosures\r\n* PatternMatching\r\n* SingleAssignment\r\n* LazyEvaluation\r\n* GarbageCollection\r\n* TypeInference\r\n* TailCallOptimization\r\n* ListComprehensions\r\n* Monadic effects [OnMonads]\r\n\r\nThese features enable or support the following aims:\r\n* shorter programs (lower lines-to-effect ratio)\r\n* program correctness\r\n* expressive programs","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}